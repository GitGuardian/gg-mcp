[project]
name = "gg-mcp-server-workspace"
version = "0.1.0"
description = "MCP server workspace for GitGuardian"
authors = [
    {name = "Author", email = "author@example.com"}
]
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "developer-mcp-server",
    "secops-mcp-server"
]

[project.scripts]
developer-mcp-server = "developer_mcp_server.server:mcp.run"
# secops-mcp-server = "secops_mcp_server.server:mcp.run"


[tool.uv.workspace]
members = ["packages/*"]

[tool.uv.sources]
"gg-api-core" = { workspace = true }
"developer-mcp-server" = { workspace = true }
"secops-mcp-server" = { workspace = true }

[tool.ruff]
line-length = 120
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pycache__",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint]
exclude = ["__init__.py"]
select = ["E", "F", "I", "W"]
ignore = ["E501", "E741", "F402", "F823", "W293"]


[tool.ruff.format]
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "asyncio" # mark a test as an asynchronous test
]


[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
update_changelog_on_bump = true
gpg_sign = true
version_files = [
    "pyproject.toml:version",
]
